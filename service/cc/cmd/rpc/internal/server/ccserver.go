// Code generated by goctl. DO NOT EDIT!
// Source: cc.proto

package server

import (
	"context"

	"github.com/bytehello/gcc-zero/service/cc/cmd/rpc/cc"
	"github.com/bytehello/gcc-zero/service/cc/cmd/rpc/internal/logic"
	"github.com/bytehello/gcc-zero/service/cc/cmd/rpc/internal/svc"
)

type CcServer struct {
	svcCtx *svc.ServiceContext
}

func NewCcServer(svcCtx *svc.ServiceContext) *CcServer {
	return &CcServer{
		svcCtx: svcCtx,
	}
}

func (s *CcServer) AppAdd(ctx context.Context, in *cc.AppAddReq) (*cc.AppAddReply, error) {
	l := logic.NewAppAddLogic(ctx, s.svcCtx)
	return l.AppAdd(in)
}

func (s *CcServer) AppList(ctx context.Context, in *cc.AppListReq) (*cc.AppListReply, error) {
	l := logic.NewAppListLogic(ctx, s.svcCtx)
	return l.AppList(in)
}

func (s *CcServer) AppUpdate(ctx context.Context, in *cc.AppUpdateReq) (*cc.AppUpdateReply, error) {
	l := logic.NewAppUpdateLogic(ctx, s.svcCtx)
	return l.AppUpdate(in)
}

func (s *CcServer) AppDel(ctx context.Context, in *cc.AppDelReq) (*cc.AppDelReply, error) {
	l := logic.NewAppDelLogic(ctx, s.svcCtx)
	return l.AppDel(in)
}

func (s *CcServer) ClusterAdd(ctx context.Context, in *cc.ClusterAddReq) (*cc.ClusterAddReply, error) {
	l := logic.NewClusterAddLogic(ctx, s.svcCtx)
	return l.ClusterAdd(in)
}

func (s *CcServer) ClusterDel(ctx context.Context, in *cc.ClusterDelReq) (*cc.ClusterDelReply, error) {
	l := logic.NewClusterDelLogic(ctx, s.svcCtx)
	return l.ClusterDel(in)
}

func (s *CcServer) ClusterUpdate(ctx context.Context, in *cc.ClusterUpdateReq) (*cc.ClusterUpdateReply, error) {
	l := logic.NewClusterUpdateLogic(ctx, s.svcCtx)
	return l.ClusterUpdate(in)
}

func (s *CcServer) ClusterList(ctx context.Context, in *cc.ClusterListReq) (*cc.ClusterListReply, error) {
	l := logic.NewClusterListLogic(ctx, s.svcCtx)
	return l.ClusterList(in)
}

func (s *CcServer) KvAdd(ctx context.Context, in *cc.KvAddReq) (*cc.KvAddReply, error) {
	l := logic.NewKvAddLogic(ctx, s.svcCtx)
	return l.KvAdd(in)
}

func (s *CcServer) KvDel(ctx context.Context, in *cc.KvDelReq) (*cc.KvDelReply, error) {
	l := logic.NewKvDelLogic(ctx, s.svcCtx)
	return l.KvDel(in)
}

func (s *CcServer) KvUpdate(ctx context.Context, in *cc.KvUpdateReq) (*cc.KvUpdateReply, error) {
	l := logic.NewKvUpdateLogic(ctx, s.svcCtx)
	return l.KvUpdate(in)
}

func (s *CcServer) KvGet(ctx context.Context, in *cc.KvGetReq) (*cc.KvGetReq, error) {
	l := logic.NewKvGetLogic(ctx, s.svcCtx)
	return l.KvGet(in)
}

func (s *CcServer) KvList(ctx context.Context, in *cc.KvListReq) (*cc.KvListReply, error) {
	l := logic.NewKvListLogic(ctx, s.svcCtx)
	return l.KvList(in)
}

func (s *CcServer) KvRelease(ctx context.Context, in *cc.KvReleaseReq) (*cc.KvReleaseReply, error) {
	l := logic.NewKvReleaseLogic(ctx, s.svcCtx)
	return l.KvRelease(in)
}

func (s *CcServer) KvClientList(ctx context.Context, in *cc.KvClientListReq) (*cc.KvClientListReply, error) {
	l := logic.NewKvClientListLogic(ctx, s.svcCtx)
	return l.KvClientList(in)
}
