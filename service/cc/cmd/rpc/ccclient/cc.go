// Code generated by goctl. DO NOT EDIT!
// Source: cc.proto

//go:generate mockgen -destination ./cc_mock.go -package cc -source $GOFILE

package ccclient

import (
	"context"

	"github.com/bytehello/gcc-zero/service/cc/cmd/rpc/cc"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	AppAddReply        = cc.AppAddReply
	AppUpdateReply     = cc.AppUpdateReply
	ClusterDelReq      = cc.ClusterDelReq
	KvDelReq           = cc.KvDelReq
	KvClientListReply  = cc.KvClientListReply
	KvClientListReq    = cc.KvClientListReq
	ClusterUpdateReq   = cc.ClusterUpdateReq
	ClusterUpdateReply = cc.ClusterUpdateReply
	ClusterListData    = cc.ClusterListData
	KvAddReply         = cc.KvAddReply
	KvGetReply         = cc.KvGetReply
	KvDelReply         = cc.KvDelReply
	ListAppData        = cc.ListAppData
	KvReleaseReply     = cc.KvReleaseReply
	KvClientData       = cc.KvClientData
	AppListReply       = cc.AppListReply
	AppDelReply        = cc.AppDelReply
	ClusterDelReply    = cc.ClusterDelReply
	KvUpdateReq        = cc.KvUpdateReq
	KvListReply        = cc.KvListReply
	KvReleaseReq       = cc.KvReleaseReq
	AppAddReq          = cc.AppAddReq
	AppUpdateReq       = cc.AppUpdateReq
	ClusterAddReply    = cc.ClusterAddReply
	AppListReq         = cc.AppListReq
	ClusterAddReq      = cc.ClusterAddReq
	KvAddReq           = cc.KvAddReq
	KvGetReq           = cc.KvGetReq
	KvData             = cc.KvData
	KvUpdateReply      = cc.KvUpdateReply
	AppDelReq          = cc.AppDelReq
	ClusterListReq     = cc.ClusterListReq
	ClusterListReply   = cc.ClusterListReply
	KvListReq          = cc.KvListReq

	Cc interface {
		AppAdd(ctx context.Context, in *AppAddReq) (*AppAddReply, error)
		AppList(ctx context.Context, in *AppListReq) (*AppListReply, error)
		AppUpdate(ctx context.Context, in *AppUpdateReq) (*AppUpdateReply, error)
		AppDel(ctx context.Context, in *AppDelReq) (*AppDelReply, error)
		ClusterAdd(ctx context.Context, in *ClusterAddReq) (*ClusterAddReply, error)
		ClusterDel(ctx context.Context, in *ClusterDelReq) (*ClusterDelReply, error)
		ClusterUpdate(ctx context.Context, in *ClusterUpdateReq) (*ClusterUpdateReply, error)
		ClusterList(ctx context.Context, in *ClusterListReq) (*ClusterListReply, error)
		KvAdd(ctx context.Context, in *KvAddReq) (*KvAddReply, error)
		KvDel(ctx context.Context, in *KvDelReq) (*KvDelReply, error)
		KvUpdate(ctx context.Context, in *KvUpdateReq) (*KvUpdateReply, error)
		KvGet(ctx context.Context, in *KvGetReq) (*KvGetReq, error)
		KvList(ctx context.Context, in *KvListReq) (*KvListReply, error)
		KvRelease(ctx context.Context, in *KvReleaseReq) (*KvReleaseReply, error)
		KvClientList(ctx context.Context, in *KvClientListReq) (*KvClientListReply, error)
	}

	defaultCc struct {
		cli zrpc.Client
	}
)

func NewCc(cli zrpc.Client) Cc {
	return &defaultCc{
		cli: cli,
	}
}

func (m *defaultCc) AppAdd(ctx context.Context, in *AppAddReq) (*AppAddReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.AppAdd(ctx, in)
}

func (m *defaultCc) AppList(ctx context.Context, in *AppListReq) (*AppListReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.AppList(ctx, in)
}

func (m *defaultCc) AppUpdate(ctx context.Context, in *AppUpdateReq) (*AppUpdateReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.AppUpdate(ctx, in)
}

func (m *defaultCc) AppDel(ctx context.Context, in *AppDelReq) (*AppDelReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.AppDel(ctx, in)
}

func (m *defaultCc) ClusterAdd(ctx context.Context, in *ClusterAddReq) (*ClusterAddReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.ClusterAdd(ctx, in)
}

func (m *defaultCc) ClusterDel(ctx context.Context, in *ClusterDelReq) (*ClusterDelReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.ClusterDel(ctx, in)
}

func (m *defaultCc) ClusterUpdate(ctx context.Context, in *ClusterUpdateReq) (*ClusterUpdateReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.ClusterUpdate(ctx, in)
}

func (m *defaultCc) ClusterList(ctx context.Context, in *ClusterListReq) (*ClusterListReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.ClusterList(ctx, in)
}

func (m *defaultCc) KvAdd(ctx context.Context, in *KvAddReq) (*KvAddReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.KvAdd(ctx, in)
}

func (m *defaultCc) KvDel(ctx context.Context, in *KvDelReq) (*KvDelReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.KvDel(ctx, in)
}

func (m *defaultCc) KvUpdate(ctx context.Context, in *KvUpdateReq) (*KvUpdateReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.KvUpdate(ctx, in)
}

func (m *defaultCc) KvGet(ctx context.Context, in *KvGetReq) (*KvGetReq, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.KvGet(ctx, in)
}

func (m *defaultCc) KvList(ctx context.Context, in *KvListReq) (*KvListReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.KvList(ctx, in)
}

func (m *defaultCc) KvRelease(ctx context.Context, in *KvReleaseReq) (*KvReleaseReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.KvRelease(ctx, in)
}

func (m *defaultCc) KvClientList(ctx context.Context, in *KvClientListReq) (*KvClientListReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.KvClientList(ctx, in)
}
