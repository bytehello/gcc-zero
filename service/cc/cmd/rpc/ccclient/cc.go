// Code generated by goctl. DO NOT EDIT!
// Source: cc.proto

//go:generate mockgen -destination ./cc_mock.go -package cc -source $GOFILE

package ccclient

import (
	"context"

	"github.com/bytehello/gcc-zero/service/cc/cmd/rpc/cc"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	AppAddReply    = cc.AppAddReply
	ListAppData    = cc.ListAppData
	AppUpdateReq   = cc.AppUpdateReq
	AppUpdateReply = cc.AppUpdateReply
	AppDelReq      = cc.AppDelReq
	AppDelReply    = cc.AppDelReply
	AppAddReq      = cc.AppAddReq
	AppListReq     = cc.AppListReq
	AppListReply   = cc.AppListReply

	Cc interface {
		AppAdd(ctx context.Context, in *AppAddReq) (*AppAddReply, error)
		AppList(ctx context.Context, in *AppListReq) (*AppListReply, error)
		AppUpdate(ctx context.Context, in *AppUpdateReq) (*AppUpdateReply, error)
		AppDel(ctx context.Context, in *AppDelReq) (*AppDelReply, error)
	}

	defaultCc struct {
		cli zrpc.Client
	}
)

func NewCc(cli zrpc.Client) Cc {
	return &defaultCc{
		cli: cli,
	}
}

func (m *defaultCc) AppAdd(ctx context.Context, in *AppAddReq) (*AppAddReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.AppAdd(ctx, in)
}

func (m *defaultCc) AppList(ctx context.Context, in *AppListReq) (*AppListReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.AppList(ctx, in)
}

func (m *defaultCc) AppUpdate(ctx context.Context, in *AppUpdateReq) (*AppUpdateReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.AppUpdate(ctx, in)
}

func (m *defaultCc) AppDel(ctx context.Context, in *AppDelReq) (*AppDelReply, error) {
	client := cc.NewCcClient(m.cli.Conn())
	return client.AppDel(ctx, in)
}
